// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.2
// source: proto/dnv/v1/dnv.proto

package pb

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Dnv_RunScript_FullMethodName  = "/dnv.v1.Dnv/RunScript"
	Dnv_GetMermaid_FullMethodName = "/dnv.v1.Dnv/GetMermaid"
)

// DnvClient is the client API for Dnv service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DnvClient interface {
	RunScript(ctx context.Context, in *GetRunScript, opts ...grpc.CallOption) (*ScriptResult, error)
	GetMermaid(ctx context.Context, in *GetMermaidRequest, opts ...grpc.CallOption) (*Mermaid, error)
}

type dnvClient struct {
	cc grpc.ClientConnInterface
}

func NewDnvClient(cc grpc.ClientConnInterface) DnvClient {
	return &dnvClient{cc}
}

func (c *dnvClient) RunScript(ctx context.Context, in *GetRunScript, opts ...grpc.CallOption) (*ScriptResult, error) {
	out := new(ScriptResult)
	err := c.cc.Invoke(ctx, Dnv_RunScript_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dnvClient) GetMermaid(ctx context.Context, in *GetMermaidRequest, opts ...grpc.CallOption) (*Mermaid, error) {
	out := new(Mermaid)
	err := c.cc.Invoke(ctx, Dnv_GetMermaid_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DnvServer is the server API for Dnv service.
// All implementations must embed UnimplementedDnvServer
// for forward compatibility
type DnvServer interface {
	RunScript(context.Context, *GetRunScript) (*ScriptResult, error)
	GetMermaid(context.Context, *GetMermaidRequest) (*Mermaid, error)
	mustEmbedUnimplementedDnvServer()
}

// UnimplementedDnvServer must be embedded to have forward compatible implementations.
type UnimplementedDnvServer struct {
}

func (UnimplementedDnvServer) RunScript(context.Context, *GetRunScript) (*ScriptResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunScript not implemented")
}
func (UnimplementedDnvServer) GetMermaid(context.Context, *GetMermaidRequest) (*Mermaid, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMermaid not implemented")
}
func (UnimplementedDnvServer) mustEmbedUnimplementedDnvServer() {}

// UnsafeDnvServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DnvServer will
// result in compilation errors.
type UnsafeDnvServer interface {
	mustEmbedUnimplementedDnvServer()
}

func RegisterDnvServer(s grpc.ServiceRegistrar, srv DnvServer) {
	s.RegisterService(&Dnv_ServiceDesc, srv)
}

func _Dnv_RunScript_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRunScript)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DnvServer).RunScript(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dnv_RunScript_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DnvServer).RunScript(ctx, req.(*GetRunScript))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dnv_GetMermaid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMermaidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DnvServer).GetMermaid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dnv_GetMermaid_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DnvServer).GetMermaid(ctx, req.(*GetMermaidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Dnv_ServiceDesc is the grpc.ServiceDesc for Dnv service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Dnv_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dnv.v1.Dnv",
	HandlerType: (*DnvServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RunScript",
			Handler:    _Dnv_RunScript_Handler,
		},
		{
			MethodName: "GetMermaid",
			Handler:    _Dnv_GetMermaid_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/dnv/v1/dnv.proto",
}
